#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

int input(char *s,int length);

int main()
{
  /*
   * getline function
   *
   */
  pid_t new_pid, my_pid, parent;
  char *buffer;
  size_t bufsize = 32;
  size_t characters;
  int count = 1, status, lenbuf = 0, new_id;
  /* string to save data result of strtok*/
  char *string;
  /*array with values for execve*/
  char **commands;
  char *proof[] = {"/bin/ls", NULL};

  buffer = (char *)malloc(bufsize * sizeof(char));
  commands = malloc(30 * sizeof(char));
  if( buffer == NULL)
    {
      perror("Unable to allocate buffer");
      exit(1);
    }
  while (1)
  {
  printf("#cisfun$");
  characters = getline(&buffer,&bufsize,stdin);
  /* read every string  with stok   */
  while (buffer[lenbuf])
    lenbuf++;
  printf("lenbuf:%d\n", lenbuf - 1);
  string = strtok(buffer, " \n");
  commands[0] = string;
  while (string != NULL)
    {
      printf("%s\n", string);
      string = strtok(NULL," \n");
      commands[count] = string;
      count++;
    }
  count = 0;
  while (commands[count])
    {
      printf("%d - %s\n",count, commands[count]);
      count++;
    }
  if ((new_id == fork()) == 0)
    {
      execve(commands[0], commands, NULL);
      printf("last line\n");
    }
  }
  return(0);
  free(buffer);
}
